using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class GameController : MonoBehaviour
{
    public float startingWarmth;
    public float startingDifficulty;
    public float diffIncPerSec;
    public float warmthIncPerSec;
    public int numEnemyPrefabs; //need so we can initialize list with correct size

    private float difficulty;

    private float warmth;
    private float baseWarmth;
    private float artificialWarmth;
    //Artificial warmth is the warmth generated by user actions such as processing coal or explosions
    //There is a incrementer function for warmth

    //Enemy spawning data structures
    private float gameStartTime;
    private float lastSpawnTime;
    private Enemy[] enemyList;
    private float[] chanceVals;
    private bool gameStarted = false;

    //UI manager object
    private PlacementUIManager placeUIMan;
    private GlobalWarmingManager globalWarmingManager;
    private ArtichokeManager artichokeManager;
    private ScoreManager scoreManager;
    private PlanetHeathUI planetHeathUI;
    private DeathManager deathManager;
    [SerializeField] private Canvas startScreen;
    [SerializeField] private Canvas pauseCanvas;
    private bool paused = false;

    //Planet
    private Planet planet;
    //Prefab
    private Planet ppf;

    

    // Start is called before the first frame update
    void Start()
    {
        this.baseWarmth = this.startingWarmth;
        this.difficulty = this.startingDifficulty;
        this.enemyList = new Enemy[numEnemyPrefabs];
        this.chanceVals = new float[numEnemyPrefabs];
        this.ppf = Resources.Load<Planet>("Prefabs/Planet/Planet");
        placeUIMan = FindObjectOfType<PlacementUIManager>();
        globalWarmingManager = FindObjectOfType<GlobalWarmingManager>();
        artichokeManager = FindObjectOfType<ArtichokeManager>();
        scoreManager = FindObjectOfType<ScoreManager>();
        planetHeathUI = FindObjectOfType<PlanetHeathUI>();
        deathManager = FindObjectOfType<DeathManager>();
        placeUIMan.gameObject.SetActive(false);
        globalWarmingManager.gameObject.SetActive(false);
        artichokeManager.gameObject.SetActive(false);
        scoreManager.gameObject.SetActive(false);
        planetHeathUI.gameObject.SetActive(false);
        deathManager.gameObject.SetActive(false);
        startScreen.gameObject.SetActive(true);

        FindObjectOfType<AudioManager>().PlayMusic(0);


        //Initializing enemy prefab list stuff
        //TO-DO when we make enemy prefabs

        enemyList[0] = Resources.Load<Enemy>("Prefabs/Enemies/BasicEnemy");

        float chanceAccum = 0; //associating value rand needs to hit to spawn this enemy
        for(int i = 0; i<numEnemyPrefabs; i++)
        {
            chanceAccum += enemyList[i].GetComponent<Enemy>().spawnChance;
            this.chanceVals[i] = chanceAccum;
            
            Debug.Log("Chanceaccum:" + chanceAccum);
        }
        //if for some reason our chances add up to over 1, this will "normalize"
        for(int i = 0; i<numEnemyPrefabs; i++)
        {
            this.chanceVals[i] /= chanceAccum;
        }

        
    }

    // Update is called once per frame
    void Update()
    {
        if(gameStarted == false)
        {
            if (Input.GetKeyDown(KeyCode.Space))
            {
                gameStarted = true;
                //Initializing planet
                this.planet = Instantiate(ppf);
                
                placeUIMan.gameObject.SetActive(true);
                globalWarmingManager.gameObject.SetActive(true);
                artichokeManager.gameObject.SetActive(true);
                scoreManager.gameObject.SetActive(true);
                planetHeathUI.gameObject.SetActive(true);
                deathManager.gameObject.SetActive(true);
                startScreen.gameObject.SetActive(false);

                //Initializing game time values
                this.gameStartTime = Time.time;
                this.lastSpawnTime = this.gameStartTime + 10;
            }
        }
        else
        {
            difficultyHandler();
            spawnHandler();
            warmthHandler();
        }

        if(Input.GetKeyDown(KeyCode.Escape)) {
            paused = !paused;
        }
        if(paused) {
            pauseCanvas.gameObject.SetActive(true );
            Time.timeScale = 0f;
        }
        else {
            pauseCanvas.gameObject.SetActive(false );
            Time.timeScale = 1f;
        }
        
    }

    void difficultyHandler()
    {
        if (this.difficulty > 1)
        {
            this.difficulty = 1;
        }
        else
        {
            this.difficulty = diffIncPerSec * (Time.time - this.gameStartTime);
        }

        if (this.difficulty > .5f) {
            if (!FindObjectOfType<AudioManager>().MusicSource.isPlaying) { FindObjectOfType<AudioManager>().PlayMusic(1); }
        }
    }

    void spawnHandler()
    {
        float timeSinceSpawn = Time.time - this.lastSpawnTime;
        if(timeSinceSpawn > difficultyFunction(difficulty))
        {
            lastSpawnTime = Time.time;
            float chance = Random.value;
            for(int i = 0; i < numEnemyPrefabs; i++)
            {
                //Debug.Log("Current chance: " + chanceVals[i]);
                if(chanceVals[i] > chance)
                {
                    Enemy newEnemy = Instantiate(enemyList[i]);
                    newEnemy.setPosPol(1f, Random.Range(0, 360));
                    //newEnemy.transform.Rotate(new Vector3(0, 0, 0));
                    float sca = planet.radius / planet.numPlots * 3;
                    newEnemy.transform.localScale = newEnemy.transform.localScale * sca;
                    break;
                }
            }
        }
        
        
    }
    
    //this returns the delay in between enemy spawns given the difficulty
    float difficultyFunction(float d)
    {

        float[] diffTable =
        {
            8f, 7f, 6f, 5f, 3f,
            2.0f, 1.5f, 1.1f, 0.8f, 0.6f, 0.15f
        };
        int index = (int)Mathf.Floor(10f * d);
        return diffTable[index];
    }

    void warmthHandler()
    {
            this.baseWarmth = warmthIncPerSec * (Time.time - this.gameStartTime);

        this.warmth = this.baseWarmth + this.artificialWarmth;
        Debug.Log("This warmth: " + this.warmth);
        Debug.Log(this.artificialWarmth);
        if (warmth > 1)
        {
            warmth = 1;
        }
        if(warmth < 0)
        {
            warmth = 0;
            this.artificialWarmth = -1*this.baseWarmth;
        }
        globalWarmingManager.SetGlobalWarming(warmth);
        SpriteRenderer rend = FindObjectOfType<Planet>().gameObject.transform.GetChild(0).gameObject.GetComponent<SpriteRenderer>();
        rend.color = new Color(2*warmth - 1/4, .4f* Mathf.Clamp(1f-2f*warmth, 0f, 1f), Mathf.Clamp(1f - 2f * warmth, 0f, 1f), 1);
    }

    public void changeWarmth(float warm)
    {
        Debug.Log("here");
        artificialWarmth += warm;
    }

    public float getWarmth()
    {
        return warmth;
    }
}